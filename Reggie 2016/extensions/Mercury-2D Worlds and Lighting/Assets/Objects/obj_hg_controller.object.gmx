<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HG_initialize();

//Temp:
var l=ds_list_create();

ds_list_add(l,32,33,34,35,36,37,38,39);
ds_list_add(l,40,41,42,43,44,45,46,47);

//Types:
var t;

HG_type_create("Empty");
 HG_type_set_shape("Empty",HG_SHAPE.empty);
 HG_type_set_visual("Empty",-1,1,5,1,c_black);
 HG_type_set_tile_n("Empty",bck_hg_0,34,2,1,1);

HG_type_create("Wall");
 HG_type_set_shape("Wall",HG_SHAPE.full);
 HG_type_set_visual("Wall",-1,1,-5,1,c_black);
 HG_type_set_tile_n("Wall",bck_hg_0,34,3,1,1);
 
HG_type_create("atWall");
 HG_type_set_shape("atWall",HG_SHAPE.full);
 HG_type_set_visual("atWall",-1,1,-5,1,c_black);
 HG_type_set_tile_n("atWall",bck_hg_0,34,3,1,1);
 HG_type_set_autotiling("atWall",l);
 
t=HG_type_create("SlopeRight");
 HG_type_set_shape(t,HG_SHAPE.slopeRight);
 HG_type_set_visual(t,-1,1,5,1,c_black);
 HG_type_set_tile_n(t,bck_hg_0,34,1,1,1); 

t=HG_type_create("SlopeLeft");
 HG_type_set_shape(t,HG_SHAPE.slopeLeft);
 HG_type_set_visual(t,-1,1,5,1,c_black);
 HG_type_set_tile_n(t,bck_hg_0,34,4,1,1);
 
t=HG_type_create("SlopeSmRight");
 HG_type_set_shape(t,HG_SHAPE.slopeSmRight);
 HG_type_set_visual(t,-1,1,5,1,c_black);
 HG_type_set_tile_xy(t,bck_hg_0,34,1,1,1,1); 

t=HG_type_create("SlopeSmLeft");
 HG_type_set_shape(t,HG_SHAPE.slopeSmLeft);
 HG_type_set_visual(t,-1,1,5,1,c_black);
 HG_type_set_tile_xy(t,bck_hg_0,34,2,1,1,1);  
 
t=HG_type_create("SlopeSmElevRight");
 HG_type_set_shape(t,HG_SHAPE.slopeSmElevRight);
 HG_type_set_visual(t,-1,1,5,1,c_black);
 HG_type_set_tile_xy(t,bck_hg_0,34,6,0,1,1); 

t=HG_type_create("SlopeSmElevLeft");
 HG_type_set_shape(t,HG_SHAPE.slopeSmElevLeft);
 HG_type_set_visual(t,-1,1,5,1,c_black);
 HG_type_set_tile_xy(t,bck_hg_0,34,7,0,1,1);
 
t=HG_type_create("Metal");
 HG_type_set_shape(t,HG_SHAPE.full);
 HG_type_set_visual(t,-1,1,-5,0,c_black);
 HG_type_set_tile_n(t,bck_hg_0,34,5,1,1); 
 
t=HG_type_create("Cog");
 HG_type_set_shape(t,HG_SHAPE.empty);
 HG_type_set_visual(t,-1,1,10,0,c_black);
 HG_type_set_tile_n(t,bck_hg_0,34,14,1,1); 
 HG_type_set_animation(t,6,1/6,true);

//HG_colgroup_create("Default","atWall","SlopeRight");
 
//FPS monitoring:
average=0;
current=0;
counter=0;
a_fps[0,59]=0;
a_fps[1,59]=0;

overlay=false;

//Engine controls:
_msr=3;
_blur=0;
_gaussian=0;
_quality=0.5;
_ambient=0.75;
_autotiling=true;
_speedhack=false;
 _skip=false;

//Other:
image_speed=0.1;
show_message("Controls: W,A,D - Movement; 1,2,3... - Lighting controls; O (letter) - Toggle debug overlay; R - Restart; Middle Mouse Button - Lantern;");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage rooms

if (room=room_hg_initialize) {

 //World:
 var w=HG_world_create(40,20,32,1,480,480,"Empty",false);
 
 _msr=3;
 _blur=0;
 _gaussian=0;
 _quality=0.5;
 _ambient=0.75;
 _autotiling=true;
 _speedhack=false;
 
 HG_world_make_default(w);
 
 HG_world_enable_autotiling(-1);
 
 HG_world_enable_lighting(-1,0.75,c_white,0.5,0,0,true,3,0.15,0.85,0.0);
 HG_world_lighting_enable_chunks(-1,8,8);

 room_goto_next();

 }
 
if (room=room_hg_dungeon) {

 if keyboard_check_pressed(ord("R")) {
 
  HG_world_destroy(-1);
 
  room_goto_previous();
 
  }

 }
 
 
 
 
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move the camera

if (room=room_hg_dungeon) {
 
 view_xview+=((obj_hg_player.x-240)-view_xview)*0.25;
 view_yview+=((obj_hg_player.y-240)-view_yview)*0.25;
 
 if point_distance(view_xview,view_yview,obj_hg_player.x-240,obj_hg_player.y-240)&lt;1 {
  view_xview=obj_hg_player.x-240;
  view_yview=obj_hg_player.y-240;
  }
 
 view_xview=round(clamp(view_xview,0,room_width-view_wview));
 view_yview=round(clamp(view_yview,0,room_height-view_hview));
 
 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor FPS
var i;

a_fps[current,counter]=fps_real;

counter+=1;

if counter=60 {

 average=0;
 for (i=0; i&lt;60; i+=1) begin
 
  average+=a_fps[current,i]/60;
  
 end;

 current=!current;
 counter=0;

 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lantern

if mouse_check_button_pressed(mb_middle) {

 lantern=HG_light_create_dynamic(-1,mouse_x,mouse_y,spr_hg_light,c_white,1.5,0,1);

 }
 
if mouse_check_button(mb_middle) {

 HG_light_set_position(-1,lantern,mouse_x,mouse_y,0);

 }
 
if mouse_check_button_released(mb_middle) {

 HG_light_destroy(-1,lantern,HG_LTYPE.dynamic);

 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Demo controls

//Debug overlay:
if keyboard_check_pressed(ord("O")) {

 overlay=!overlay;
 
 show_debug_overlay(overlay);

 }

//Blur:
if keyboard_check_pressed(ord("1")) {

 _blur=(_blur+8) mod 40;

 HG_world_lighting_set_blur(-1,_blur,_gaussian);

 }

//Gaussian:
if keyboard_check_pressed(ord("2")) {

 _gaussian=(_gaussian+0.5) mod 1.5;
 
 HG_world_lighting_set_blur(-1,_blur,_gaussian);

 }

//MSR:
if keyboard_check_pressed(ord("3")) {

 _msr=max(1,(_msr+1) mod 4);

 HG_world_lighting_set_msr(-1,_msr,0.15,0.85,0.0);

 }
 
//Quality:
if keyboard_check_pressed(ord("4")) {

 _quality=max(0.125,(_quality*2) mod 2);

 HG_world_lighting_set_quality(-1,_quality);

 }
 
//Ambient:
if keyboard_check_pressed(ord("5")) {

 _ambient=max(0.5,(_ambient+0.25) mod 1.25);

 HG_world_lighting_set_ambient(-1,_ambient,c_white);

 }
 
//Autotiling:
if keyboard_check_pressed(ord("6")) {

 _autotiling=!_autotiling;

 if _autotiling=true
  HG_world_enable_autotiling(-1)
  else
   HG_world_disable_autotiling(-1);
   
 HG_world_draw_redraw_tiles(-1);

 }
 
//Speedhack:
if keyboard_check_pressed(ord("7")) {

 _speedhack=!_speedhack;

 }
 
//Other:
if keyboard_check(ord("C")) {

 //HG_light_draw_quick(-1,mouse_x,mouse_y,spr_hg_light,c_white,1,0,1);

 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room=room_hg_dungeon) {

 HG_world_draw_enable_tiles(-1,0);

 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw lighting

if (room=room_hg_initialize) exit;

if mouse_check_button(mb_middle)
 draw_sprite(spr_hg_lantern,-1,mouse_x,mouse_y);

if (_speedhack=true and _skip=true) {
 
 HG_world_render_lighting_fast(-1,view_xview,view_yview);

 }
 else {
  
  HG_world_render_lighting(-1,view_xview,view_yview);
   
  }

_skip=!_skip;
  
HG_world_draw_lighting(-1,view_xview,view_yview);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the world

if (room=room_hg_initialize) exit;

HG_world_draw(-1,view_xview,view_yview,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Demo settings

draw_set_colour(c_white);

var s="";;

s+="FPS (real, average): "+string(round(average));

s+="#Instance count: "+string(instance_count);

s+="#Tile count: "+string(tile_get_count());

s+="#[1] Simple blur: "+string(_blur);

s+="#[2] Gaussian blur: "+string(_gaussian);

s+="#[3] MSR: "+string(_msr);
 if _msr=1 s+=" (Off)"

s+="#[4] Quality: "+string(_quality);

s+="#[5] Ambient: "+string(_ambient);

s+="#[6] Autotiling: "+string(_autotiling);

s+="#[7] Frameskip: ";
 if _speedhack=true s+="On" else s+="Off";

draw_text(8,8+16*overlay,s);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Demo

if (keyboard_check_pressed(vk_escape)=true) {

 HG_free();
 game_end();
 
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var c=HG_collision_point(-1,mouse_x,mouse_y,true,32);

draw_set_colour(c_green);

if (c=true)
 draw_set_colour(c_red);
 
draw_circle(mouse_x,mouse_y,4,false);

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
