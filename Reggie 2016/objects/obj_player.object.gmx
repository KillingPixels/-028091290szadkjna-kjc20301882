<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>bodyParObj</parentName>
  <maskName>playerDefaultMaskSpr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

global.player_obj_id=id;

//We use our own variables, as we need more precise control to their
//update timing.
_hspeed=0;
_vspeed=0;
_usePlat=0;
_grounded=0;
_climb=PLAYER.climb;
_aircontrol=PLAYER.airControl/10;

//Movement Settings:
_tapTimer=PLAYER.rollTapSpeed; // double-tap counter
_rollTimer=0; // how long left to roll
_movementState=0;
_stamina=PLAYER.topStamina;
_stamCool=0;  // Stamina regen cooldown
_stamReq=1;   // Stamina requirement modifier

_hSpeedTreshold=12;
_vSpeedTreshold=15;

//Other:
_combatTimer=0;
_health=PLAYER.topHealth;
_armour=0;
_armourMod=1; // Armour speed modifier
_defib=3;     // Defibrillator charges
_group=GROUP.friendly;
_isInHarmful = 0;

//Buff system:
buf_instance_init();
_bufSave="";
_bufWeightCounter=0;
_invWeight=0;

//Image data:
_eyesY=20;
_relY=sprite_get_height(playerDefaultMaskSpr)-sprite_get_height(playerRollMaskSpr);

_width=sprite_get_width(mask_index);
_height=sprite_get_height(mask_index);

_imageState=0;
_imageTorso=0;
_imageLegs=0;
_imageXScale=1;
image_speed=0;

instance_create(0,0,obj_camera);

//Camera positioning
_camx = x-view_wview[0]/2;
_camy = y-view_hview[0]/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STUB - Hazard damage
/*if (place_free_obj(x, y, harmfulPar, false) &gt; 0)
{
    if (_isInHarmful == 0)
    {
        screen_flash(c_red, 0.1);
        _isInHarmful = HARMFUL_OBJ.flashDelay;
        player_damage(HARMFUL_OBJ.damage, 0,0);
    }
    else
        _isInHarmful--;
}
else
    _isInHarmful = 0;*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>!game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update

if !(global.scene_active) begin

 //*** LOAD RECOVERY: ***
 buf_instance_recover();
 
 //*** INVENTORY WEIGHT: ***
 if (_bufWeightCounter=0) {
 
  _invWeight=inv_calc_weight();
  _bufWeightCounter=60;
  
  }
 
 //*** COMBAT TIMER: ***
 if _combatTimer&gt;0
  _combatTimer-=1;

 //*** BUFFS: ***
 buf_execute();
 buf_execute_vfx();

 //mod_dr    -  Dealt with in player_damage(...)
 //mod_kbrs  -  Dealt with in player_damage(...)
 //mod_hac   -  Dealth with in heart_get_ha_chance()
 //mod_abs   -  Pending...

 //*** ARMOUR: ***
 _stamReq=1;
 _armourMod=1;
 if _armour&lt;=0 {
  _armour=0;
  global.inventory_armour[4]=_armour;
  inv_remove_armour();
  }
  else if _armour&gt;0 {
   global.inventory_armour[4]=_armour/armour_get_ratio(global.inventory_armour[1]);
   _stamReq*=armour_get_streq(global.inventory_armour[1]);
   _armourMod*=armour_get_speed(global.inventory_armour[1]);
   }
 
 //*** HEALTH: ***  
 player_regenerate();
 
 _health+=mod_hp/60;
 
 //_health=100;
 
 if _health&lt;=0 {
  _health=0;
  fade_trigger_scr(c_black,"player_died_scr",false);
  }
  else if _health&gt;PLAYER.topHealth
   _health=PLAYER.topHealth; 
  
 //*** STAMINA: ***
 if _stamCool&gt;0 _stamCool-=1;
  
 if _stamina&lt;PLAYER.topStamina and _movementState&lt;&gt;3 and _stamCool&lt;=1
  _stamina+=PLAYER.staminaRPF*mod_streg*0.1*(1+1*(_hspeed=0 &amp;&amp; _vspeed=0));
  
 _stamina+=mod_sta*mod_streg/60;
 
 if _stamina&gt;PLAYER.topStamina
  _stamina=PLAYER.topStamina;
   
 //*** DEFIBRILLATOR: ***
 _defib=clamp(_defib,0,3);
 
 if keyboard_check_pressed(userControls[KEYBOARD.defibrillate])=true and _defib&gt;0 {
  player_defibrillate();  
  }
  
end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

if !(global.scene_active) begin //Regular movement
  
 if _invWeight&gt;PLAYER.carryWeight*mod_carryw
  _abscontrol=0.5*mod_abs
  else
   _abscontrol=mod_abs;
   
 if buf_instance_has_buff(-1,BUFF_ID.defibrillate)=true {
  mod_kbrs=0;
  }

 //*** CONTROLS: ***
 var __left, __right, __up, __down;

 //Left / right:
 var movdir=(keyboard_check(userControls[KEYBOARD.right])-keyboard_check(userControls[KEYBOARD.left]));
 __left=(movdir==-1);
 __right=(movdir==1);

 //Double-tap check:
 _roll=0;

 if _tapTimer&lt;&gt;0
  _tapTimer-=sign(_tapTimer);

 if keyboard_check_pressed(userControls[KEYBOARD.left])=true {
 
  if _tapTimer&lt;0 {
   _roll=-1;
   }
   else {
    _tapTimer=-PLAYER.rollTapSpeed;
    }
  
  }
 
  else if keyboard_check_pressed(userControls[KEYBOARD.right])=true {

   if _tapTimer&gt;0 {
    _roll=+1;
    }
    else {
     _tapTimer=+PLAYER.rollTapSpeed;
     }
  
   }

 //Up / down:
 __up=keyboard_check(userControls[KEYBOARD.jump]);
 __down=keyboard_check(userControls[KEYBOARD.crawl]);
 
 //*** STATE CORRECTION: ***

 //Check if there is a collision when standing up:
 var __predMask, __suCol;
 __prevMask=mask_index;
 set_mask(playerDefaultMaskSpr);
 __suCol=place_meeting_solid(x,y); 
 set_mask(__prevMask);
 
 switch (_movementState) begin
 
  case 0: //Walk / Run / Jump
    if _roll&lt;&gt;0 and place_meeting_terrain(x,y+1,!__down)=true and _stamina&gt;=PLAYER.staminaUFR {
     _stamina -=PLAYER.staminaUFR*_stamReq;
     _rollTimer=PLAYER.rollLength;
     /*START ROLLING*/
      mask_index=playerRollMaskSpr;
      _width=sprite_get_width(mask_index);
      _height=sprite_get_height(mask_index);
      _hspeed=max(_hspeed,_maxspeed)*_roll*PLAYER.rollMod/10;
      _vspeed-=4;
      _movementState=3;
      heart_cause_strain(HEART.roll_strain);
     }
     else if __down=true and (place_meeting_terrain(x,y+1,!__down)=true or _vspeed&lt;0) {
      /*START CROUCHING*/
       mask_index=playerRollMaskSpr;
      _width=sprite_get_width(mask_index);
      _height=sprite_get_height(mask_index);
       y+=16;
       _movementState=1;
      }
      else if __up=true and place_meeting_terrain(x,y+1,!__down)=false and place_meeting_obj(x,y,ladderObj,false)=true {
       /*START CLIMBING*/
        _movementState=2;
        _vspeed=0;
        __up=false;
       }
       
   break;
   
  case 1: //Crawl
    if (__down=false and __suCol=false) {
     /*GET UP*/
      mask_index=playerDefaultMaskSpr;
      _width=sprite_get_width(mask_index);
      _height=sprite_get_height(mask_index);
      y-=16;
      _movementState=0;
     }
     else if _roll&lt;&gt;0 and _stamina&gt;=PLAYER.staminaUFR*_stamReq {
      _stamina -=PLAYER.staminaUFR*_stamReq;
      _rollTimer=PLAYER.rollLength;
      /*START ROLLING*/
       mask_index=playerRollMaskSpr;
       _width=sprite_get_width(mask_index);
       _height=sprite_get_height(mask_index);
       _hspeed=max(_hspeed,_maxspeed)*_roll*PLAYER.rollMod/10;
       _vspeed-=4;
       _movementState=3;
       heart_cause_strain(HEART.roll_strain);
      }
   break;
   
  case 2: //Ladder
    if _roll&lt;&gt;0 {
     /*JUMP OFF*/
      _hspeed=max(_hspeed,_maxspeed)*_roll*PLAYER.rollMod/10;
      _vspeed-=4;
      _gravity=PLAYER.gravity/10;
      _movementState=0;
     }
     else if place_meeting_obj(x,y,ladderObj,false)=false {
      /*FALL OFF*/
       _gravity=PLAYER.gravity/10;
       _movementState=0;
      }
   break;
   
  case 3: //Roll
    if _rollTimer&gt;0
     _rollTimer-=1
     else {
      if __down=false and __suCol=false {
       /*GET UP*/
        y-=16;
        mask_index=playerDefaultMaskSpr;
       _width=sprite_get_width(mask_index);
       _height=sprite_get_height(mask_index);
        _movementState=0;
       }
       else {
        /*START CROUCHING*/
         _movementState=1;
        }
      }
   break;
   
  default:
   break;
 
 end;

 //*** EXECUTING MOVEMENT: ***

 //Set up basic variables:
 switch (_movementState) begin
 
  case 0: //Walk / Run / Jump
    if __up=true {
     keyboard_clear(userControls[KEYBOARD.jump]);
     if place_meeting_terrain(x,y-PLAYER.jumpPower,false)=true
      __up=false;
     }
     
    if  (keyboard_check(userControls[KEYBOARD.sprint]) and _stamina&lt;0) {
     keyboard_clear(userControls[KEYBOARD.sprint]);
     }

    if !(keyboard_check(userControls[KEYBOARD.sprint]) and _stamina&gt;0) { //Normal
     _maxspeed=PLAYER.topHorzSpeed;
     _friction=1-PLAYER.friction/100;
     _acceleration=PLAYER.hcMovement/10;
     _gravity=PLAYER.gravity/10;
     }
     else { //Sprint
      _maxspeed=PLAYER.topHorzSpeed+3;
      _friction=1-PLAYER.friction/100;
      _acceleration=PLAYER.hMovement/10;
      _stamina-=PLAYER.staminaCPF*0.1*_stamReq;
      _gravity=PLAYER.gravity/10;
      _stamCool=60;
      heart_cause_strain(HEART.sprint_strain/60);
      }
   break;
   
  case 1: //Crawl
    if __up=true
     keyboard_clear(userControls[KEYBOARD.jump]);
    
    _jumpPower*=0.75;
    _maxspeed=PLAYER.topCrawlSpeed;  
    _friction=1-PLAYER.friction/100;
    _acceleration=PLAYER.hcMovement/10;
    _gravity=PLAYER.gravity/10;
   break;
   
  case 2: //Ladder
    _maxspeed=PLAYER.topHorzSpeed;
    _friction=(1-PLAYER.friction/100)*0.744;
    _acceleration=PLAYER.hcMovement/10;
    _gravity=0;
    
    if __up=true and _abscontrol&gt;0 {
     _vspeed=min(_vspeed,-PLAYER.climbSpeed);
     }
     else if __down=true and _abscontrol&gt;0 {
      _vspeed=max(_vspeed,PLAYER.climbSpeed);
      }
      else {
       //STUB
       _vspeed=0;}
    __up=false;
    __down=false;
   break;
   
  case 3: //Roll
    if __up=true
     keyboard_clear(userControls[KEYBOARD.jump]);

    _maxspeed=PLAYER.topHorzSpeed*PLAYER.rollMod/10;
    _friction=1-PLAYER.slideFriction/100;
    _acceleration=PLAYER.hcMovement/10;
    _gravity=PLAYER.gravity/10;
    
     __right=false;
     __left=false;
     __up=false;
   break;
   
  default:
   break;
 
 end;
 
 //Apply buffs:
 _maxspeed*=mod_speed*_armourMod;
 _jumpPower=PLAYER.jumpPower*mod_jump;

 //Check _abscontrol:
 if _abscontrol=0 {
  __left=false;
  __right=false;
  __up=false;
  __down=false;
  _tapTimer=0; 
  }
 
 //Execute movement:
 movement_execute(__left,__right,__down,__up,8);
 
end else { //Movement in cut-scenes
  movement_execute(0,0,0,0,8);

  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image -- STUB

//Grounded check (Very important!):
//_grounded=place_meeting_terrain(x,y+8,!keyboard_check(userControls[KEYBOARD.crawl]),y+2)==true

if (_hspeed=0 or _grounded=false)
 _imageState=0
 else
  _imageState=1;  
 
switch (_imageState) begin
 
 case 0: //Idle
   image_index=0;
  break;
   
 case 1: //Running without weapon
   image_index+=0.25;
  break;
   
 default:
  break;
 
end;

//Facing:
if _hspeed&lt;&gt;0 {
 _imageXScale=sign(_hspeed);
 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quick items

if !(global.scene_active) begin

 //EQUIPPING:
 var __oldActive;

 //First the script checks whether the currently active item has changes since the last step:
 __oldActive=global.inventory_active;

 if keyboard_check_pressed(userControls[KEYBOARD.hotSwap1]) global.inventory_active=1
  else if keyboard_check_pressed(userControls[KEYBOARD.hotSwap2]) global.inventory_active=2
   else if keyboard_check_pressed(userControls[KEYBOARD.hotSwap3]) global.inventory_active=3
    else if keyboard_check_pressed(userControls[KEYBOARD.hotSwap4]) global.inventory_active=4
     else if keyboard_check_pressed(userControls[KEYBOARD.hotSwap5]) global.inventory_active=5;
    
 if mouse_wheel_up() and gui_get_mouse_in_hud()&lt;&gt;1 global.inventory_active-=1
  else if mouse_wheel_down() and gui_get_mouse_in_hud()&lt;&gt;1 global.inventory_active+=1;
 
 if global.inventory_active&gt;5 global.inventory_active=1
  else if global.inventory_active&lt;1 global.inventory_active=5;

 //Action:
 if __oldActive&lt;&gt;global.inventory_active 
  player_update_hands();
 
 //USING:
 if mouse_check_button_pressed(userControls[MOUSE.shoot])=true and
    global.inventory_quick[global.inventory_active,1]&lt;&gt;"ZZZZZ" and
    real(inv_item_get_static_value(global.inventory_quick[global.inventory_active,1],4))=-1 {
  inv_use_item(-global.inventory_active);
  }
  
end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Opening interfaces

if (game_paused()=true or global.scene_active=true) exit;

if keyboard_check_pressed(userControls[KEYBOARD.openInv])=true {
 instance_create(x,y,obj_gui_inventory);
 }
 else if keyboard_check_pressed(userControls[KEYBOARD.openJou])=true {
  instance_create(x,y,obj_gui_journal);
  }
  else if keyboard_check_pressed(userControls[KEYBOARD.openCra])=true {
   instance_create(x,y,obj_gui_crafting);
   }
   else if keyboard_check_pressed(userControls[KEYBOARD.openSet])=true {
    instance_create(x,y,obj_gui_settings);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pick up items
/*var __item = other._myItem,
    __amount = other._amount;

with (other)
    instance_destroy();
    
if (__item &lt;&gt; "") and
   (__amount &lt;&gt; 0)
 inv_add_item(__item,__amount);
  
//inventory_additems(g_playerInventory, __item,__amount);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self

//draw_sprite_ext(mask_index,0,x,y,1,1,0,c_white,0.5);
//mp_grid_draw(global.pfd_grid);

draw_sprite_ext(spr_player_run,image_index,x,y,_imageXScale,ite_ext(_movementState&lt;&gt;0,0.5,1),0,c_white,1);

/*var s;

s="abc,#def,#ghi,#etc."
s+="#uop!";

draw_text_ext(mouse_x,mouse_y,s,16,999);*/
 
//draw_bbox(0,c_fuchsia);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STUB
window_set_fullscreen(!window_get_fullscreen());
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,48</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
