<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_repair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic variables setup:
_name="VendorName";
_portrait=spr_portrait_template;
_potency=999;
_cost=999;

scroll=0;
selected=0;
maxdur=0;

xx=0;
yy=0;

//Maximum target durability:
update_maxdur=false;

//Repair item list:
var i;

for (i=1; i&lt;=10; i+=1) begin
 item_list[i]=0;
end;

update_list=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Closing:
if keyboard_check_pressed(userControls[KEYBOARD.pause])=true
 instance_destroy();

//Scroll:
if mouse_wheel_down()=true {
 if item_list[10]&lt;&gt;0 scroll+=1;
 }
 else if mouse_wheel_up()=true {
  if scroll&gt;0 scroll-=1;
  }

//Scroll correction:
if item_list[10]=0 and scroll&gt;0
 scroll-=1;
  
//Maximum durability update:
if update_maxdur=true {
 if selected&gt;0
  maxdur=weapon_max_dur(global.inventory_current[selected,1])
  else
   maxdur=weapon_max_dur(global.inventory_quick[-selected,1]);
 update_maxdur=false;
 }

//Repair item list update:
if update_list=true {

 var i,counter,valid_counter;

 for (i=1; i&lt;=10; i+=1) begin
  item_list[i]=0;
 end;

 valid_counter=0;
 counter=1;
 
 for (i=1; i&lt;=global.inventory_slots+5; i+=1) begin
 
  if i&lt;=5 {
  
   if real(inv_item_get_static_value(global.inventory_quick[i,1],0))=INV_TYPE.weapon {
    
    //Add to array
    if valid_counter&gt;=scroll {
     item_list[counter]=-i;
     counter+=1;
     }
    valid_counter+=1;
   
    }  
  
   }
   else {
   
    if real(inv_item_get_static_value(i-5,0))=INV_TYPE.weapon {
    
     //Add to array
     if valid_counter&gt;=scroll {
      item_list[counter]=i-5;
      counter+=1;
      }
     valid_counter+=1;
    
     }
   
    }
    
  if counter&gt;10 break;
 
 end;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spr,val,name,counter;

draw_set_font(f_windows);

//Set up GUI x and y:
xx=gui_width()/2-sprite_get_width(sprite_index)/2;
yy=gui_height()/2-sprite_get_height(sprite_index)/2;

//Draw own sprite:
draw_sprite(sprite_index,0,xx,yy);

//ITEM LIST::
draw_set_alpha(1);
draw_set_valign(fa_top);
draw_set_halign(fa_left);

counter=0;

//LOOP BEGIN:
repeat (10) begin
counter+=1;

if item_list[counter]&lt;&gt;0 {

//Small icons:
if item_list[counter]&gt;0
 name=global.inventory_current[item_list[counter],1]
 else
  name=global.inventory_quick[-item_list[counter],1];

spr=real( inv_item_get_static_value(name,7));

draw_sprite_ext(spr,0,xx+9,yy+counter*20+43,0.5,0.5,0,c_white,1); 

//Clickable text boxes:
spr=ite(item_list[counter],selected,1,0);

if gui_draw_sprite_clickable(spr_window_name_box_wide,spr,xx+29,yy+counter*20+43,1)=true
 {selected=item_list[counter]; 
  update_maxdur=true;}

//Combination names:
draw_set_color(c_black);
 draw_text(xx+32,yy+44+20*counter,name+" ("+string(round(inv_item_get_dynamic_value(abs(item_list[counter]),item_list[counter]&lt;0,3)))+" DR)");

}
end;
//LOOP END;

//Filter title:
draw_set_color(c_black);
draw_text(xx+12,yy+42,"Choose a weapon to repair:");

//VENDOR:
draw_text(xx+254,yy+41,_name);
draw_sprite_ext(_portrait,0,xx+355,yy+67,38/64,38/64,0,c_white,1);
draw_text(xx+254,yy+70,"Skill / Price:#"+string(_potency)+" / $"+string(_cost));

//REPAIRED ITEM BEGIN:

//Item name:
if selected&lt;&gt;0 {
  if selected&gt;0
   name=global.inventory_current[selected,1]
   else
    name=global.inventory_quick[-selected,1];
  }
 else name="No weapon selected.";
 
draw_text(xx+254,yy+118,name);


if selected&lt;&gt;0 {

 //Item icon:
 spr=real(inv_item_get_static_value(name,7));
 draw_sprite(spr,0,xx+355,yy+144);

 //Durability:
 str=inv_item_get_dynamic_value(abs(selected),selected&lt;0,3);

 str="Durability:#"+string(round(str))+" / "+string(maxdur);
 draw_text(xx+254,yy+147,str);

 //Durability after repair:
 draw_set_color(c_green);

 str=min(inv_item_get_dynamic_value(abs(selected),selected&lt;0,3)+_potency,maxdur);
   
 str="After repair:#"+string(round(str))+" / "+string(maxdur);
 draw_text(xx+254,yy+209,str);
 
 }

//REPAIRED ITEM END;

//Repair button:
if selected&lt;&gt;0 {

 val=inv_item_get_dynamic_value(abs(selected),selected&lt;0,3);

 if clamp(val+_potency,0,maxdur)&lt;&gt;val
  spr=0
  else {
   spr=1;
   }
   
}
else
 spr=1;


if gui_draw_sprite_clickable(spr_window_button_repair,spr,xx+247,yy+248,true)=true
 {if spr=0 {
 
   if selected&gt;0 {
    inv_item_set_dynamic_value(selected,false,3,round(clamp(val+_potency,0,maxdur)));   
    }
    else {     
     inv_item_set_dynamic_value(-selected,true,3,round(clamp(val+_potency,0,maxdur)));   
     
     if instance_exists(weaponHoldingPar)=true {
     
      if weaponHoldingPar.patron=-selected
       weaponHoldingPar.xdur=round(clamp(val+_potency,0,maxdur));
     
      }
     
     }
   
   //Charge money
   
   }
   
 }
 
//MONEY:
draw_sprite(spr_window_repair_money,0,xx+353,yy+186);
draw_set_colour(c_black);
draw_set_halign(fa_right);
draw_text(xx+390,yy+202,"0999");
 
//SCROLL:
if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+230,yy+63,true)=true {
 if scroll&gt;0 scroll-=1;
 }
if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+230,yy+244,true)=true {
 if item_list[10]&lt;&gt;0 scroll+=1;
 }

//Close button:
if gui_draw_sprite_clickable_rel(spr_window_close,0,xx+283,yy+270)
 instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is empty but needed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>200,200</point>
  </PhysicsShapePoints>
</object>
