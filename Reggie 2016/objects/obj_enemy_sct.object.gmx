<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_sct</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ai_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Initialization

set_behavior_values_sct();

_group=GROUP.enemy;

_isCommander=false;
_isPrimal=true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup

 //Primary attack (Claw):
 _attackRange=16;
 _attackSpeed=60;
 _attackLength=5;    // custom
 _attackDamage=5;
 _attackHKnock=2;
 _attackVKnock=2;
 
 _prefDist=0;
 
 //Secondary attack (Jump):
 _attackSpeedSec=60;
 _specJumpPower=9;
 _specJumpMinDist=0;
 _specJumpMaxDist=480;
 _specJumpRand=20;
 
 //General: 
 _attackTimer=-_attackSpeed;
 _attackTimerSec=-_attackSpeedSec;
 _attackMode=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free memory
buf_instance_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup
 
//Cooldowns:
if _attackTimer&gt;-_attackSpeed
 _attackTimer-=1;
 
if _attackTimerSec&gt;-_attackSpeedSec
 _attackTimerSec-=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Step Actions (Secondary)

//Health regen (STUB)

//Attack other of its kind if idle (STUB)

//
if _grounded=false and _hspeed&lt;&gt;0
 _hspeed+=sign(_hspeed)*0.05;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Primary, Claw)
var __eta, __dist, __spd;

if _aiState=AI_STATE.hunt begin

 if _attackTimer&gt;-_attackSpeed {
 
  //Deal damage:
  if (instance_exists(_target) and _target&gt;0) {
   if (_attackTimer=0 and distance_to_object(_target)&lt;=_attackRange) {
  
    if (_target=global.player_obj_id) {
     player_damage(_attackDamage,_attackVKnock,_attackHKnock);
     screen_flash(c_red);
     }
     else {
      object_damage(_target,_attackDamage,_attackVKnock,_attackHKnock);
      }
   
    }
   }
  }
  
  else {
 
  //Try to attack:
  if (instance_exists(_target) and _target&gt;0) {

   //Estimate ETA:
   __eta=9999;
   __dist=9999;
   if !HG_collision_line(-1,x,y,_tarX,_tarY,GLOBAL.precision) {

    __dist=distance_to_object(_target)-_attackRange/2;
    __spd=abs(_hspeed-_target._hspeed);
  
    if __spd&lt;&gt;0
     __eta=ceil(__dist/__spd)+1;

    }
      
   //Start attack animation: 
   if (__eta&lt;_attackLength or __dist&lt;=_attackRange/2) {
    _attackTimer=_attackLength;  
    }
 
  }
  
 }

end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Secondary, Jump)
var dist,dir,pwr,add;

if _aiState=AI_STATE.hunt begin

 if _attackTimerSec=-_attackSpeedSec {
 
  if (instance_exists(_target) and _target&gt;0) {
   
    dist=point_distance(x,y,_target.x,_target.y);
   _grounded=place_meeting_terrain(x,y+8,(_vspeed==0),y+2);
   
   if (dist&gt;_specJumpMinDist and dist&lt;_specJumpMaxDist and _grounded=true
       and !HG_collision_line(-1,x,y,_target.x,_target.y-_target._eyesY-_target._relY,GLOBAL.precision)) {
   
     add=sign(_target.x-x)*irandom_range(_specJumpRand/2,_specJumpRand);       
     dir=point_direction(x,y,_target.x,_target.y-_target._eyesY-_target._relY)+add;
   
     y-=4;
     
     pwr=1+dist/_specJumpMaxDist;
     
     _hspeed+=_specJumpPower/pwr*dcos(dir);
     _vspeed-=_specJumpPower/pwr*dsin(dir);
     
     _attackTimerSec=min(-round(_attackSpeedSec*(1.5-pwr)),0);
     
   }  
    
  }
 
 }

end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Set image

if _hspeed&lt;&gt;0 {
 if _grounded=false
  image_xscale=sign(_hspeed)
  else
   image_xscale=-1+(_tarX&gt;x)*2;
 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_ai_parent">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self

draw_sprite_ext(mask_index,0,x,y,1,1,0,c_white,0.25);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,ite(_moveHeight,1,0.5,1),1,c_white,1);

if _attackTimer&gt;=0
 draw_sprite_ext(mask_index,0,x,y,1,1,0,c_yellow,0.5);

draw_set_colour(c_aqua);
draw_set_halign(fa_center);

draw_text(x,y-32,"SCT / "+string(_attackTimerSec));

draw_circle(x,y-_eyesY,3,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
