<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_brain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ai_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Initialization

set_behavior_values_alpha();

_isCommander=true;
_isPrimal=true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup

 //Primary attack:
 _attackRange=32;     // e - Lower than preferred distance
 _attackSpeed=40;     // e
 _attackLength=20;    // e
 _attackDamage=5;     // e
 _attackHKnock=10;    // e
 _attackVKnock=5;     // e 
 
 _prefDist=0;
 
 //Secondary attack:
 _attackRangeSec=480;
 _attackLengthSec=5;
 _attackDamageSec=5;
 _attackKnockSec=10;
 
 _weaponRotSpeed=15;
 _weaponRotSmooth=80;
 _weaponXOffset=32;
 _weaponYOffset=0;
 _weaponAngle=0;
 _attackSpeedSec=15;
 
 //General:
 _attackTimer=-_attackSpeed;
 _attackTimerSec=-_attackSpeedSec;
 _attackMode=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free memory
buf_instance_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup
var __dist;

if _aiState=AI_STATE.hunt {

 if (instance_exists(_target) and _target&gt;0)
  __dist=point_distance(x,y,_target.x,_target.y)
  else __dist=0;
   
  if __dist/*-_rangeTolerance*2*/&gt;_attackRange {
   _attackMode=1;
   }
   else
    _attackMode=0;
    
  _prefDist=_prefDistPrim;  
   
 }
 
//Cooldowns:
if _attackTimer&gt;-_attackSpeed
 _attackTimer-=1;
 
if _attackTimerSec&gt;-_attackSpeedSec
 _attackTimer-=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Primary)
var __eta, __dist, __spd;

if _attackMode=0 begin

if _attackTimer&gt;-_attackSpeed {
 
 //Deal damage:
 if (instance_exists(_target) and _target&gt;0) {
  if (_attackTimer=0 and distance_to_object(_target)&lt;=_attackRange) {
  
   if (_target=global.player_obj_id) {
    player_damage(_attackDamage,_attackVKnock,_attackHKnock);
    screen_flash(c_red);
    }
    else {
     object_damage(_target,_attackDamage,_attackVKnock,_attackHKnock);
     }
   
   }
  }
 }
  
 else {
 
 //Try to attack:
 if (instance_exists(_target) and _target&gt;0) {

  //Estimate ETA:
  __eta=9999;
  __dist=9999;
  if collision_line(x,y,_tarX,_tarY,staticParObj,true,true)==noone {

   __dist=distance_to_object(_target)-_attackRange/2;
   __spd=abs(_hspeed-_target._hspeed);
  
   if __spd&lt;&gt;0
    __eta=ceil(__dist/__spd)+1;

   }

  tv1=__eta;  
      
  //Start attack animation: 
  if (__eta&lt;_attackLength or __dist&lt;=_attackRange/2) {
   _attackTimer=_attackLength;  
   }
 
 }
  
}

end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Secondary)
var a,c,n,d,f,t;

if _attackMode=1 begin

 c=collision_line(x,y,_target.x,_target.y,staticParObj,true,true)==noone;
 t=(instance_exists(_target) and _target&gt;0);

 //Weapon angle: 
 a=(_weaponAngle&gt;90 and _weaponAngle&lt;=270);
 
 if (image_xscale=1 and a=true) _weaponAngle=0
  else if (image_xscale=-1 and a=false) _weaponAngle=180;
  
 if (t=true) {

  //Needed angle:
  if c=true
   n=point_direction(x,y,_target.x,_target.y)
   else n=ite_ext(image_xscale==1,0,-1);
  //Angle difference:
  d=angle_difference(n,_weaponAngle); 
  //Speed coefficient:
  f=min(1,abs(d)/_weaponRotSmooth);
  //Moving:
  if abs(d) &lt;= 1 _weaponAngle=n
   else {
   if d&gt;0 _weaponAngle+=_weaponRotSpeed*f else _weaponAngle-=_weaponRotSpeed*f;
   }
  //Angle correction:
  if _weaponAngle&gt;360 _weaponAngle-=360
   else if _weaponAngle&lt;0   _weaponAngle=360;    
   
  }
  
 //Firing:
 if (t=true and c=true and _attackTimerSec=-_attackSpeedSec) {
 
  var xx,yy,son;
      
  xx=x+x_rotated(_weaponXOffset,_weaponYOffset*image_xscale,_weaponAngle);
  yy=y+y_rotated(_weaponXOffset,_weaponYOffset*image_xscale,_weaponAngle);
      
  repeat (1) {
      
   /*son=instance_create(xx,yy,obj_projectile);
      
   son._direction=image_angle+random_range(-bl_scatter[mode_current],bl_scatter[mode_current])*(1.5-argument2/2);
   son.image_angle=son._direction;
   son._speed=bl_speed[ammo_current];
   son._sprite=bl_sprite[ammo_current];
            
   son.damage=bl_damage[ammo_current]*min((xdur/b_dur + 0.17)*2,1);     
   son.exp_radius=bl_expradius[ammo_current];
   son.exp_sprite=bl_expsprite[ammo_current];
   son.knockback=bl_knockback[ammo_current];
   son.dot=bl_dot[ammo_current];
   son.dot_type=bl_dot_type[ammo_current];
   son.arc=bl_arc[ammo_current];
       
   weapon_projectile_init(son,object_index,ammo_current,GROUP.friendly);*/
      
   }
 
  }

end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Set image

if _hspeed&lt;&gt;0 {
 if _grounded=false
  image_xscale=sign(_hspeed)
  else
   image_xscale=-1+(_tarX&gt;x)*2;
 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_ai_parent">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self

draw_sprite_ext(mask_index,0,x,y,1,1,0,c_white,0.5);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,ite(_moveHeight,1,0.5,1),1,c_white,1);

if _attackTimer&gt;=0
 draw_sprite_ext(mask_index,0,x,y,1,1,0,c_yellow,0.5);

draw_set_halign(fa_center);
draw_text(x,y,"Alpha");

if _attackMode=1
 draw_sprite_ext(weaponTestSpr,0,x,y-8,1,1,_weaponAngle,c_white,1);
 
draw_set_colour(c_aqua);
draw_circle(x,y-_eyesY,3,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
