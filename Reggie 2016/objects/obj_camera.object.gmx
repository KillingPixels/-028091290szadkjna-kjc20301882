<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>omega=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Camera

if (game_paused()=true) exit;

//Camera shake:
var _shake=0;

omega=(omega+22.5) mod 360;

if (instance_exists(obj_screen_shake)) {
 _shake = obj_screen_shake._xOff;
 }
 
//Set target position:   
var _targetX, _targetY; 
 
if (global.scene_camera_on=false) {

 _targetX=(global.player_obj_id).x-view_wview[0]/2; 
 _targetY=(global.player_obj_id).y-view_hview[0]/2;
  
 } else {
 
  _targetX=global.scene_camera_x-view_wview[0]/2;
  _targetY=global.scene_camera_y-view_hview[0]/2;
 
  }
        
//Move to target position:
if (x&lt;&gt;_targetX or y&lt;&gt;_targetY) {

 var _dir=point_direction(x,y,_targetX,_targetY),
     _dist=point_distance(x,y,_targetX,_targetY);
     
 x+=round(dcos(_dir)*(_dist/8));
 y-=round(dsin(_dir)*(_dist/8));

 }
        
//If close, snap:
if (abs(x-_targetX)&lt;1/8)
 x=_targetX; 
if (abs(y-_targetY)&lt;1/8)
 y=_targetY;
 
//Apply shake:
x+=cos(omega)*_shake;
y-=sin(omega)*_shake;
 
//Clamp &amp; Round:   
view_xview[0]=round(clamp(x,0,room_width-view_wview[0]));
view_yview[0]=round(clamp(y,0,room_height-view_hview[0]));

//Activations / deactivations:
instance_deactivate_object(deactivateParObj);
instance_activate_region(view_xview[0]-320,view_yview[0]-320,
                         view_wview[0]+640,view_hview[0]+640,true);
instance_activate_object(global.player_obj_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
