<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_inventory</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic variables setup:
scroll=0;
selected=0;
type=0;

desc_text="";
desc_scroll=0;
update_desc=false;
desc_lines=1;
desc_max_lines=14;

xx=0;
yy=0;

inv_refresh();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Closing:
if keyboard_check_pressed(userControls[KEYBOARD.pause])=true
 instance_destroy();

//Scroll:
var i,check;

check=false;

if selected&gt;0 {
 for (i=1; i&lt;=15; i+=1) begin
   if global.inventory_list[i]=selected
     check=true;
  end;  
 }
 else if selected&lt;0 and selected&gt;-6 {
  if global.inventory_quick[-selected,1]&lt;&gt;"ZZZZZ" check=true; 
  }
  else {
   if global.inventory_armour[1]&lt;&gt;"ZZZZZ" check=true;
   }
 
if check=false {selected=0;}

//Description:
var itt,name;

if update_desc=true {

 if selected&gt;0 itt=real(inv_item_get_static_value(selected,0))
  else {
   if selected&gt;-6 itt=real(inv_item_get_static_value(global.inventory_quick[-selected,1],0))
    else itt=INV_TYPE.armour;
   }
  
 if selected&gt;0 {
  desc_orig_text=inv_item_get_static_value(selected,6);
  name=global.inventory_current[selected,1];
  }
  else {
   if selected&gt;-6 {
    desc_orig_text=inv_item_get_static_value(global.inventory_quick[-selected,1],6);
    name=global.inventory_quick[-selected,1];
    }
    else {
     desc_orig_text=inv_item_get_static_value(global.inventory_armour[1],6);
     name=global.inventory_armour[1];
     }
   }
 
 if itt=INV_TYPE.weapon {
  //If it's a weapon:
  desc_orig_text="-Weapon-#Durability: "+string(round(inv_item_get_dynamic_value(abs(selected),selected&lt;0,3)))+"/"+string(weapon_max_dur(name))+"#"+
                 "Ammo: "+string(inv_item_get_dynamic_value(abs(selected),selected&lt;0,1))+"/"+string(weapon_max_ammo(name))+" ("+weapon_amt_name(name,inv_item_get_dynamic_value(abs(selected),selected&lt;0,2))+
                 ")##"+desc_orig_text;
  }
  else if itt=INV_TYPE.armour{
   //If it's armour:
   if selected&gt;0
    desc_orig_text="-Armour-#Durability: "+string(round(inv_item_get_dynamic_value(selected,0,1)))+"/"+string(armour_max_dur(name))+"#"+
                   "Protection: "+string(round(inv_item_get_dynamic_value(selected,0,1)*armour_get_ratio(name)))+" HP"+
                   "##"+desc_orig_text
    else desc_orig_text="-Armour-#Durability: "+string(round(global.inventory_armour[4]))+"/"+string(armour_max_dur(name))+"#"+
                        "Protection: "+string(round(global.inventory_armour[4]*armour_get_ratio(name)))+" HP"+
                        "##"+desc_orig_text;
   }
   else {
    //If it's not weapon nor armour:
    desc_orig_text="-Item-##"+desc_orig_text;
    }
    
 desc_lines=string_count_lines(desc_orig_text,140);

 desc_text=string_cut_for_scrolling(desc_orig_text,140,desc_max_lines,desc_scroll);

 update_desc=false;
 
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (device_mouse_raw_x(0)-40)/gui_get_scale()&lt;gui_width()/2 {

 if scroll&lt;global.inventory_slots-15 scroll+=1;
 
 }
 else {
 
  if desc_scroll&lt;desc_lines-desc_max_lines and selected&lt;&gt;0{
  
   desc_scroll+=1;
   update_desc=true;
   
   }
   
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (device_mouse_raw_x(0)-40)/gui_get_scale()&lt;gui_width()/2 {

 if scroll&gt;0 scroll-=1;
 
 }
 else {
 
  if desc_scroll&gt;0 and selected&lt;&gt;0{
   desc_scroll-=1;
   update_desc=true;
   } 
  
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a,l,i,spr,str,itt,refresh,new_scroll;

draw_set_font(f_windows);

//Set up GUI x and y:
xx=gui_width()/2-sprite_get_width(sprite_index)/2;
yy=gui_height()/2-sprite_get_height(sprite_index)/2;

//Draw own sprite:
draw_sprite(spr_window_inventory,0,xx,yy);

//ITEM LIST::
draw_set_alpha(1);
draw_set_valign(fa_top);
draw_set_halign(fa_left);

inv_list_type(type,scroll);
counter=0;

//LOOP BEGIN:
refresh=false;
repeat (15) begin
counter+=1;

if global.inventory_list[counter]&lt;&gt;-1 {

//Small icons:
 spr=real( inv_item_get_static_value( global.inventory_list[counter],7 ) );
 draw_sprite_ext(spr,0,xx+9,yy+counter*20+43,0.5,0.5,0,c_white,1); 

//Clickable text boxes:
spr=ite(global.inventory_list[counter],selected,1,0);
if gui_draw_sprite_clickable(spr_window_name_box,spr,xx+29,yy+counter*20+43,1)=true
 {selected=global.inventory_list[counter];
  desc_text="";
  desc_scroll=0;
  update_desc=true; }

//Item names and quantities/HP:
draw_set_color(c_black); 
if global.inventory_list[counter]&gt;0 {
 str=global.inventory_current[ global.inventory_list[counter] ,1];
 if string_length(str)&gt;15
  str=string_copy(str,1,15)+"...";
 itt=real(inv_item_get_static_value(global.inventory_list[counter],0));
 if itt=INV_TYPE.armour {
  str+=" ("+string(round(global.inventory_current[global.inventory_list[counter],4]))+" DR)";
  }
  else if itt=INV_TYPE.weapon {
   str+=" ("+string(round(global.inventory_current[global.inventory_list[counter],6]))+" DR)";
   }
   else if global.inventory_current[global.inventory_list[counter],3]&gt;1
    str+=" ("+string(global.inventory_current[global.inventory_list[counter],3])+")";
 draw_text(xx+32,yy+45+counter*20,str);
 }
 
//Equip buttons:
if gui_draw_sprite_clickable(spr_window_button_quick,0,xx+208,yy+counter*20+43,1,"Equip item")=true {
 if real(inv_item_get_static_value(global.inventory_list[counter],0))&lt;&gt;INV_TYPE.armour {
  //It's not armour:
  if inv_add_item_to_quick(global.inventory_list[counter])=true {
   player_update_hands();
   refresh=true;
   desc_text="";
   desc_scroll=0;
   selected=0;
   }
  }
  else {
   //It is armour:
   if (global.inventory_armour[1]=="ZZZZZ") {
    
      cha_start("Equipping armour...",PLAYER.armourEqTime,false,"inv_equip_armour",global.inventory_list[counter]);
      mouse_clear(mb_left);
      instance_destroy();
    
      }
   }
 }

} 
end;
if refresh=true inv_refresh();
//LOOP END;

//QUICK ITEMS:
for (i=1; i&lt;=5; i+=1;) begin

 if global.inventory_quick[i,1]&lt;&gt;"ZZZZZ" {
  spr=real(inv_item_get_static_value(global.inventory_quick[i,1],7));
  if gui_draw_sprite_clickable_ext(spr,0,xx+7+(i-1)*48,yy+390,true,27/38,27/38,1)=true {
   selected=-i;
   desc_text="";
   desc_scroll=0;
   update_desc=true;
   }
  if selected=-i draw_sprite(spr_checkered_square,0,xx+7+(i-1)*48,yy+390);
  if gui_draw_sprite_clickable(spr_window_button_quick,1,xx+34+(i-1)*48,yy+394,true,"Unequip item")=true {
   selected=0;
   inv_remove_item_from_quick(i);
   player_update_hands();
   }
  }

end;

//ARMOUR:
if global.inventory_armour[1]&lt;&gt;"ZZZZZ" {
 spr=real(inv_item_get_static_value(global.inventory_armour[1],7));
 if gui_draw_sprite_clickable_ext(spr,0,xx+248,yy+390,true,27/38,27/38,1)=true {
  selected=-6;
  desc_text="";
  desc_scroll=0;
  update_desc=true;
  }
 if selected=-6 draw_sprite(spr_checkered_square,0,xx+248,yy+390);
 }
 
//Filter title:
draw_set_color(c_black);

switch (type) begin

case 0:
 draw_text(xx+12,yy+44,"Showing: All"); break;

case 1:
 draw_text(xx+12,yy+44,"Showing: Bulk"); break;

case 2:
 draw_text(xx+12,yy+44,"Showing: Weapon"); break;

case 3:
 draw_text(xx+12,yy+44,"Showing: Consumables"); break;

case 4:
 draw_text(xx+12,yy+44,"Showing: Ammo"); break;
 
case 5:
 draw_text(xx+12,yy+44,"Showing: Apparel"); break;

default:
 break;

end;

//Type filter buttons:
if gui_draw_sprite_clickable(spr_window_button_filter,0,xx+208,yy+39,1,"Change filter")=true
  {type-=1; if type=-1 type=5;}
if gui_draw_sprite_clickable(spr_window_button_filter,1,xx+225,yy+39,1,"Change filter")=true
 {type+=1; if type=6 type=0;}

//ITEM DETAILS BEGIN:
if selected&lt;&gt;0 begin

//Item name:
draw_set_color(c_black); 
if selected&gt;0 str=global.inventory_current[selected,1]+ite(sign(global.inventory_current[selected,3]-1),1," ("+string(global.inventory_current[selected,3])+")","");
 else if selected&gt;-6 str=global.inventory_quick[-selected,1]+ite(sign(global.inventory_quick[-selected,3]-1),1," ("+string(global.inventory_quick[-selected,3])+")","");
  else str=global.inventory_armour[1];
draw_text(xx+252,yy+42,str);

//Item icon:
if selected&gt;0 spr=real(inv_item_get_static_value(selected,7))
 else if selected&gt;-6 spr=real(inv_item_get_static_value(global.inventory_quick[-selected,1],7));
  else {}
draw_sprite(spr,0,xx+370,yy+67);

//Description:
draw_text(xx+253,yy+113,desc_text);
 
//Item options buttons:
if selected&gt;0 itt=real(inv_item_get_static_value(selected,0))
 else if selected&gt;-6 itt=real(inv_item_get_static_value(global.inventory_quick[-selected,1],0));
  else itt=INV_TYPE.armour;

if itt=INV_TYPE.weapon or itt=INV_TYPE.armour {

//If it's weapon or armour:
if gui_draw_sprite_clickable(spr_window_button_action,0,xx+254,yy+369,true)
 {/*STUB - Drop*/}
if gui_draw_sprite_clickable(spr_window_button_action,2,xx+329,yy+369,true)
 {if itt=INV_TYPE.weapon {
   a=instance_create(x,y,obj_gui_repair);
   a.target=selected;
   instance_destroy();
   }
   else {
    a=instance_create(x,y,obj_gui_armour_repair);
    a.target=selected;
    instance_destroy();   
    }
  }
 
} else {
//If it's not weapon or armour:
if gui_draw_sprite_clickable(spr_window_button_action,0,xx+254,yy+369,true)
 {/*STUB - Drop*/}
if gui_draw_sprite_clickable(spr_window_button_action,1,xx+329,yy+369,true)
 {inv_use_item(selected);}

}

//Mutual equip/unequip button:
if selected&gt;0 {
 if gui_draw_sprite_clickable(spr_window_button_equip,0,xx+254,yy+349,true)=true {
  if real(inv_item_get_static_value(selected,0))&lt;&gt;INV_TYPE.armour {
   //If it's not armour:
   if inv_add_item_to_quick(selected)=true {
    player_update_hands();
    inv_refresh();
    desc_text="";
    desc_scroll=0;
    selected=0;
    }
   }
   else {
    //If it's armour:
    if (global.inventory_armour[1]=="ZZZZZ") {
    
      cha_start("Equipping armour...",PLAYER.armourEqTime,false,"inv_equip_armour",selected);
      mouse_clear(mb_left);
      instance_destroy();
    
      }
    } 
  }
 }
 else if selected&gt;-6 {
  if gui_draw_sprite_clickable(spr_window_button_equip,1,xx+254,yy+349,true)=true {
   inv_remove_item_from_quick(-selected);
   player_update_hands();
   desc_text="";
   desc_scroll=0;
   selected=0;
   }
  }
  else {
   if gui_draw_sprite_clickable(spr_window_button_equip,1,xx+254,yy+349,true)=true {
    inv_remove_armour();
    desc_text="";
    desc_scroll=0;
    selected=0;
    }
   }

//Desc scroll buttons:
if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+395,yy+113,true)=true
 {if desc_scroll&gt;0 {desc_scroll-=1; update_desc=true;} }
 
if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+395,yy+324,true)=true
 {if desc_scroll&lt;desc_lines-desc_max_lines {desc_scroll+=1; update_desc=true;} }
 
//Desc scroll bar:
new_scroll=gui_draw_scroll_bar(xx+396,yy+133,xx+405,yy+322,desc_lines,desc_max_lines,desc_scroll,placeholderSpr);
if new_scroll&lt;&gt;desc_scroll {
 desc_scroll=new_scroll;
 update_desc=true;}

end;
//ITEM DETAILS END;
  
//Scroll buttons:
if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+230,yy+63,true)=true
 {if scroll&gt;0 scroll-=1;}
 if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+230,yy+344,true)=true
 {if scroll&lt;global.inventory_slots-15 scroll+=1;}
 
//Scroll bar:
scroll=gui_draw_scroll_bar(xx+230,yy+83,xx+240,yy+341,global.inventory_slots,15,scroll,placeholderSpr);
 
//Manual sorting buttons:
if gui_draw_sprite_clickable(spr_window_button_msort_2,0,xx+9,yy+364,true,"Move up/left")=true
 {if selected&gt;0 {
  l=0;
  for (i=1; i&lt;=15; i+=1) begin
    if global.inventory_list[i]=selected {l=i; break;}
   end;
  if l&gt;1 and global.inventory_list[l-1]&lt;&gt;-1 
   {inv_item_switch(selected,global.inventory_list[l-1],false);
   selected=global.inventory_list[l-1]; }
   }
   else if selected&gt;=-5 and selected&lt;-1 {
    inv_item_switch(-selected,-selected-1,true);
    selected=selected+1;
    player_update_hands();
    }
 }
 
 if gui_draw_sprite_clickable(spr_window_button_msort_2,1,xx+172,yy+364,true,"Move down/right")=true
 {if selected&gt;0 {
  l=0;
  for (i=1; i&lt;=15; i+=1) begin
    if global.inventory_list[i]=selected {l=i; break;}
   end;
  if l&lt;15 and global.inventory_list[l+1]&lt;&gt;-1 
   {inv_item_switch(selected,global.inventory_list[l+1],false);
   selected=global.inventory_list[l+1]; }
   }
   else if selected&gt;-5 and selected&lt;=-1 {
     inv_item_switch(-selected,-selected+1,true);
     selected=selected-1;
     player_update_hands();
     }
 }
 
//Stack button:
if gui_draw_sprite_clickable(spr_window_button_stack,0,xx+126,yy+364,true,"Stack inventory")=true
 {selected=0;
  inv_stack();}
 
//Automatic sort button:
if gui_draw_sprite_clickable(spr_window_button_asort,0,xx+83,yy+364,true,"Sort by name")=true
 {selected=0;
  inv_sort();}
  
//Weight counter:
draw_set_color(c_black);
draw_text(xx+302,yy+395,"Wg: "+string(inv_calc_weight())+" / "+string(PLAYER.carryWeight*(global.player_obj_id).mod_carryw));

//Close button:
if gui_draw_sprite_clickable_rel(spr_window_close,0,xx+297,yy+421)
 instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is empty but needed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inv_refresh();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inv_add_item("Bullet vest",1);
inv_add_item("Stimpack",5);
inv_add_item("Jitter",5);
inv_add_item("Relaxer",5);
inv_add_item("CTW",5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inv_add_item("Flamethrower",1);
inv_add_item("Acid Flask Launcher",1);
inv_add_item("Machinegun",1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inv_add_item("Fuel",50);
inv_add_item("Spare parts",5);
inv_add_item("Acid Flask",50);
inv_add_item("Bullet",50);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>188,188</point>
  </PhysicsShapePoints>
</object>
