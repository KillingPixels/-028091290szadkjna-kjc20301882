<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>placeholderSpr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>bodyParObj</parentName>
  <maskName>playerDefaultMaskSpr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Initialization

//&lt;MOVEMENT&gt; variables:

 //Output:
 _hspeed=0;
 _vspeed=0;
 _grounded=0;

 //Mask:
  mask_index=aiCrouchMask;
 _height=sprite_get_height(mask_index);
 _width=sprite_get_width(mask_index);

 //Default variables:
 def_maxspeed=6;       // e
 def_climbspeed=0;
 def_acceleration=0.5; // e
 def_jumpPower=0;
 def_aircontrol=1;
 def_abscontrol=1;
 def_gravity=0;
 def_friction=1-0.005; // e

 //Other:
 _moveMode=0;

 _xPrevOlder=x;
 _xPrevOld=x;
 
 _hSpeedTreshold=11;   // e
 _vSpeedTreshold=14;   // e
 
 _KBresist=0;
 
 _eccentricity=1;      // e
 _rangeTolerance=32;   // e, d
 _prefTolerance=0;     // e, d 
 pfd_instance_init();
 
//&lt;BEHAVIOUR&gt; variables:
_scriptIdle=0; // d
_scriptHide=0; // d
_scriptStep=0; // d

_skipUpdate=0;

//&lt;COMBAT&gt; variables:

 //Basic:
 _group=GROUP.enemy; // e

 _maxHealth=100;
 _health=_maxHealth;
 _armour=0;

 _aiState=AI_STATE.idle;
 _target=-1;
 _tarX=-1;
 _tarY=-1;
 _hiddenTimer=0;
 _hiddenTimerMax=900; // e
 _fleeTimerMax=300;   // e
 _prefDistPrim=0;     // e
 _prefDistSec=0;      // e
 _prefDist=_prefDistPrim;
 _viewRange=800;      // e
 _playerBias=50;      // e
 
 //Buffs:
 buf_instance_init();

 //Patrol:
 point_1_x=-1;
 point_1_y=-1;
 point_2_x=-1;
 point_2_y=-1;
 _aiPatrol=false;
 _aiPatrolNode=0;
 
 //Guard:
 _startX=x;
 _startY=y;
 _aiGuard=false;
 _guardRange=240;
 _guardBody=-1;
 
 //Morale:
 _moraleBase=0;       // e
 _moraleCounter=irandom(60);
 _morale=(MORALE.flee+MORALE.rage)/2;

//&lt;OTHER&gt; variables:

 _density=15/100;
 _eyesY=15; // e
 _randomGen=0;
 _randomGenCounter=0;
 _idleType=0;
 sprite_index=choose(spr_enemy_fsm);
 
 _bufSave="";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup

 //Primary attack:
 _attackRange=16;     // e - Lower than preferred distance
 _attackSpeed=60;     // e
 _attackLength=8;     // e
 _attackDamage=2;     // e
 _attackHKnock=5;     // e
 _attackVKnock=3;     // e 
 
 //Secondary attack: 
 _chanceToGrab=35;    // e
 _attackSpeedSec=15;  // e
 
 //General:
 _lastAttack=0;
 _grabbedPlayer=0;
 _attackMode=0;
  
 _attackTimer=-_attackSpeed;
 _attackTimerSec=-_attackSpeedSec;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free memory
buf_instance_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack setup
var __dist;

//***************************************
if object_index=obj_ai_parent_flyer begin
//***************************************

if _aiState=AI_STATE.hunt {

 if _grabbedPlayer=true {
  _attackMode=1;
  }
  else {
   _attackMode=0;
   }
  
 }
 
//Cooldowns:
if _attackTimer&gt;-_attackSpeed
 _attackTimer-=1;
 
if _attackTimerSec&gt;-_attackSpeedSec
 _attackTimer-=1;
 
//Other:
_lastAttack+=1;

//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update

//Load recovery:
buf_instance_recover();

//Calc General Random:
if _randomGenCounter&gt;0 _randomGenCounter-=1
 else {
  _randomGenCounter=59;
  _randomGen=random(100);
  }

//Save old xPrevious:
_xPrevOlder=_xPrevOld;
_xPrevOld=xprevious;

//*** CALC MORALE: ***
 if _moraleCounter&gt;0 _moraleCounter-=1
  else {
   _moraleCounter=60;
   _morale=ai_calc_morale(_moraleBase);
   }
   
//*** STATE CORRECTION: ***
  
if _skipUpdate=0 { 

switch (_aiState) begin

 case AI_STATE.idle: // ------------------------------------------------------- Idle
   var a;
   //Switch to ret if allowed:
   if _aiGuard=true and (
      point_distance(x,y,_startX,_startY)&gt;_guardRange
      or (_guardBody&gt;0 and point_distance(x,y,_guardBody.x,_guardBody.y)&gt;_guardRange)) {
    _aiState=AI_STATE.ret;
    _tarX=_startX;
    _tarY=_startY;
    _moveMode=1;
    }
   //Switch to patrol if allowed:
    else if _aiPatrol=true {
     _aiState=AI_STATE.patrol;
     if _aiPatrolNode=0 {
      _tarX=point_2_x;
      _tarY=point_2_y;
      _moveMode=1;
      }
      else {
       _tarX=point_1_x;
       _tarY=point_1_y;
       _moveMode=1;
       }
     }
     else {
      ai_execute_idle(_idleType);   
      
      if _scriptIdle&lt;&gt;0
       script_execute(_scriptIdle);
      
      _moveMode=0;
      }
    
   //Engage in combat if needed:
   ai_engage(40,_viewRange,_playerBias);
  break;
  
 case AI_STATE.patrol:  // ---------------------------------------------------- Patrol
   if _aiPatrol=false
    _aiState=AI_STATE.idle
    else {
     //Change node if needed:
     if _aiPatrolNode=0 {
      if point_distance(x,y,point_2_x,point_2_y)&lt;32
       _aiPatrolNode=1; }
      else {
       if point_distance(x,y,point_1_x,point_1_y)&lt;32
       _aiPatrolNode=0;
       }    
     //Go to node:
     if _aiPatrolNode=0 {
      _tarX=point_2_x;
      _tarY=point_2_y;
      _moveMode=1;
      }
      else {
       _tarX=point_1_x;
       _tarY=point_1_y;
       _moveMode=1;
       }
     //Engage in combat if needed:
     ai_engage(40,_viewRange,_playerBias);
     }
  break;
  
 case AI_STATE.ret: //aka. Guard ---------------------------------------------- Ret / Guard
   if _guardBody=-1 {
    _tarX=_startX;
    _tarY=_startY;
    }
    else {
     _tarX=_guardBody.x; 
     _tarY=_guardBody.y;
     }
   if point_distance(x,y,_tarX,_tarY)&gt;_width
    _moveMode=1
    else {
     _moveMode=-1;
     _aiState=AI_STATE.idle;
     }
   //Engage in combat if needed:
   ai_engage(40,_viewRange,_playerBias);
  break;
  
 case AI_STATE.flee:  // ------------------------------------------------------ Flee
   var a;
   
   if irandom(10)&gt;6 {
     a=ai_select_target(_group,max(_viewRange,400),100);
     
     if a&gt;0 {
      _target=a;
      _tarX=_target.x;
      _tarY=_target.y;
      _moveMode=2;
      _hiddenTimer=_fleeTimerMax;
      }
       
     }
   
   _hiddenTimer-=1;

   //Stop fleeing if morale changes:
   if _morale&gt;MORALE.flee or _hiddenTimer&lt;0
    _aiState=AI_STATE.idle;
  break;
  
 case AI_STATE.forcedmove: //-------------------------------------------------- Forced move
   // If only used as a surrogate State for forced movements.
   // Ends when updates are no longer skipped. 
   _aiState=AI_STATE.idle;
  break;
  
 case AI_STATE.hide:  // ------------------------------------------------------ Hide
   //Run away while visible:
   if irandom(10)&gt;6 {
    a=ai_select_target(_group,max(_viewRange,400),100);
    
    if a&gt;0 {
      _target=a;
      _tarX=_target.x;
      _tarY=_target.y-_target._eyesY;
      }
      
    }
    
   if (instance_exists(_target) and _target&gt;0)
    _moveMode=2
    else
     _moveMode=0;

   var __clc, __clu;
   
   __clc=collision_line(x,y,_tarX,_tarY,staticParObj,true,true)==noone;
   __clu=collision_line(x,y-_eyesY,_tarX,_tarY,staticParObj,true,true)==noone;
    
   //Hidden actions:
   if (__clc=false and __clu=false) {
    if _scriptHide&lt;&gt;0
     script_execute(_scriptHide);
    }
    
  break;
  
 case AI_STATE.hunt:  // ------------------------------------------------------ Hunt
   //Morale too low:
   if _morale&lt;MORALE.flee 
    _aiState=AI_STATE.flee
    //No target:
    else if !(instance_exists(_target) and _target&gt;0) {
     _aiState=AI_STATE.idle;
     _moveMode=0; 
     _target=-1;
     }
     //Hide:
     else if (_attackMode=-1) {
      _aiState=AI_STATE.hide;
      }
      else {
       var __clf, __pd;
     
       _tarX=_target.x;
       _tarY=_target.y;
        
       //Keep preferred distance:
       __clf=collision_line(x,y-_eyesY,_tarX,_tarY,staticParObj,true,true)==noone;
       __pd=distance_to_object(_target);
       
       //Reset Player's combat timer:
       if (_target=global.player_obj_id) and __clf=true
        player_reset_combat_timer();

       if (abs(__pd-_prefDist)&lt;=_prefTolerance and __clf=true)
       //or (abs(x-_tarX)&lt;=_rangeTolerance/2 and __pd&lt;=_rangeTolerance)
        _moveMode=0
        else if (__pd&gt;_prefDist or __clf=false)
         _moveMode=1
         else if (__pd&lt;_prefDist and __clf=true)
          _moveMode=2;
          else
           _moveMode=0;
           
       //Adjust hidden timer, change target if needed:
       if __clf=true
        _hiddenTimer=_hiddenTimerMax
        else {
         _hiddenTimer-=1;
         ai_engage(20,_viewRange,_playerBias);
         }
       if _hiddenTimer=0 {
        _aiState=AI_STATE.idle;
        _moveMode=0;
        _target=-1;
        }        
       }
  break;
  
 default:
  break;

end;

}
else
 _skipUpdate-=1;

//*** SET VARIABLES: ***

switch (_aiState) begin

 case AI_STATE.idle:
   _maxspeed=def_maxspeed;
   _climbSpeed=def_climbspeed;
   _acceleration=def_acceleration;
   _jumpPower=def_jumpPower;
   _aircontrol=def_aircontrol;
   _abscontrol=def_abscontrol;
   _gravity=def_gravity;
   _friction=def_friction;
  break;
  
 case AI_STATE.patrol:
   _maxspeed=def_maxspeed/2;
   _climbSpeed=def_climbspeed;
   _acceleration=def_acceleration/2;
   _jumpPower=def_jumpPower;
   _aircontrol=def_aircontrol;
   _abscontrol=def_abscontrol;
   _gravity=def_gravity;
   _friction=def_friction;
  break;
  
 case AI_STATE.ret:
   _maxspeed=def_maxspeed;
   _climbSpeed=def_climbspeed;
   _acceleration=def_acceleration;
   _jumpPower=def_jumpPower;
   _aircontrol=def_aircontrol;
   _abscontrol=def_abscontrol;
   _gravity=def_gravity;
   _friction=def_friction;
  break;
  
 case AI_STATE.flee:
   _maxspeed=def_maxspeed*1.3;
   _climbSpeed=def_climbspeed;
   _acceleration=def_acceleration;
   _jumpPower=def_jumpPower;
   _aircontrol=def_aircontrol;
   _abscontrol=def_abscontrol;
   _gravity=def_gravity;
   _friction=def_friction;
  break;
  
 case AI_STATE.hide:
   _maxspeed=def_maxspeed;
   _climbSpeed=def_climbspeed;
   _acceleration=def_acceleration;
   _jumpPower=def_jumpPower;
   _aircontrol=def_aircontrol;
   _abscontrol=def_abscontrol;
   _gravity=def_gravity;
   _friction=def_friction;
  break;
  
 case AI_STATE.forcedmove:
   _maxspeed=def_maxspeed;
   _climbSpeed=def_climbspeed;
   _acceleration=def_acceleration;
   _jumpPower=def_jumpPower;
   _aircontrol=def_aircontrol;
   _abscontrol=def_abscontrol;
   _gravity=def_gravity;
   _friction=def_friction;
  break;
  
 case AI_STATE.hunt:
   _maxspeed=def_maxspeed;
   _climbSpeed=def_climbspeed;
   _acceleration=def_acceleration;
   _jumpPower=def_jumpPower;
   _aircontrol=def_aircontrol;
   _abscontrol=def_abscontrol;
   _gravity=def_gravity;
   _friction=def_friction;
  break;
  
 default:
  break;

end;

//*** MORALE BUFFS: *** (STUB) 

//*** BUFFS: ***
buf_execute();
buf_execute_vfx();

_maxspeed*=mod_speed;
_climbSpeed*=mod_speed;
_acceleration*=mod_speed;
_jumpPower*=mod_jump;

_health+=mod_hp/60;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Actions
 
//***************************************
if object_index=obj_ai_parent_flyer begin
//***************************************

if _aiState=AI_STATE.hunt and (_lastAttack&lt;_attackSpeed or _grabbedPlayer=1) {

 if _moveMode=1
  _moveMode=2;

}

//***
 end;
//***

if _scriptStep&lt;&gt;0
 script_execute(_scriptStep);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STUB - Movement execution -- MODE 0
/*
Just move inertially.

STUB - Try to land if in air and Idle.

*/
if _moveMode=0 begin

 movement_execute(0,0,0,0,4);

end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement execution -- MODE 1
/*
Move towards target.
*/
var __left,__right,__down,__up;

if _moveMode=1 begin

 if collision_line(x,y,_tarX,_tarY,staticParObj,false,true)==noone {
 
  //STRAIGHT LINE MOVEMENT:
 
  if instance_exists(tracker) &amp;&amp; tracker&gt;0
   remove(tracker);
   
  __down=false;
  
  if sqrt( sqr(_hspeed) + sqr(_vspeed) )&lt;_maxspeed {
  
   var __dir=point_direction(x,y,_tarX,_tarY);
   
   _hspeed+=dcos(__dir)*_acceleration;
   _vspeed-=dsin(__dir)*_acceleration*0.8;
   
   if sign( dsin(__dir) )=-1
    __down=true;
   
   }    
 
  }
  else {
  
   //MOVEMENT WITH PATHFINDING:
  
   //Deal with trackers &amp; set left/right controls:
   if point_distance(x,y,_tarX,_tarY)&lt;32 {
    if instance_exists(tracker) &amp;&amp; tracker&gt;0
     remove(tracker);
     __left=0;
     __right=0;
    }
    else {
     pfd_request();
     __left=(sign(_hspeed)==-1);
     __right=(sign(_hspeed)==1);
     }
  
   //Controls:
   __down=false;
   __up=false;

   if instance_exists(tracker)=true and tracker&gt;0 {

    //Left / right:
    if tracker._Xstate=1 {
     __right=true;
     __left=false;
     }
     else if tracker._Xstate=-1 {
      __left=true;
      __right=false;
      }
   
    //Up / down: 
    if tracker._Ystate=1 {
     __down=true;
     __up=false;
     }
     else if tracker._Ystate=-1 {
      __down=false;
      __up=true;
      }
   
   }

   //Setting speed:
   if __left=true {

    if _hspeed&gt;-_maxspeed _hspeed-=_acceleration;

    }
    else if __right=true {
 
     if _hspeed&lt;_maxspeed _hspeed+=_acceleration;
 
     }
     else
      _hspeed*=_friction;
  
   if __up=true {

    if _vspeed&gt;-_maxspeed _vspeed-=_acceleration*0.5;
 
    }
    else if __down=true {
 
     if _vspeed&lt;_maxspeed _vspeed+=_acceleration*0.5;
 
     }
     else _vspeed*=_friction;  
     
     
  
   }
   
//Terrain proximity correction:
if collision_line(x,y,x,y+48,staticParObj,false,true)&lt;&gt;noone {
 _vspeed-=_acceleration*0.5;
 }

//Executing:
movement_execute(0,0,__down,0,4);

end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement execution -- MODE 2
/*
Move away from the target.
*/
var __left,__right,__down,__up;

if _moveMode=2 begin

//Deal with trackers:
if instance_exists(tracker) &amp;&amp; tracker&gt;0 {
  remove(tracker);
  }
  
//Controls:

//Up &amp; Down:
if _tarY&lt;y {
 __down=true;
 __up=false;
 }
 else {
  __down=false;
  __up=true;
  }

//Correction:
if y+80&lt;0 {
 __down=true;
 __up=false;
 }
 else if collision_line(x,y,x,y+64,staticParObj,false,true)&lt;&gt;noone
      or collision_line(x,y,x,y-64,staticParObj,false,true)==noone {
  __down=false;
  __up=true;
  }
 
//Left &amp; Right: 
if abs(_hspeed)&gt;_maxspeed*0.5 {

 __left=sign(_hspeed)==-1;
 __right=sign(_hspeed)==1;

 }
 else {

 if _tarX&gt;x {
  __left=true;
  __right=false;
  }
  else {
   __left=false;
   __right=true;
   }
  
 }

//Setting speed:
if __left=true {

 if _hspeed&gt;-_maxspeed _hspeed-=_acceleration;

 }
 else if __right=true {
 
  if _hspeed&lt;_maxspeed _hspeed+=_acceleration;
 
  }
  else
   _hspeed*=_friction;
  
if __up=true {

 if _vspeed&gt;-_maxspeed _vspeed-=_acceleration*0.5;
 
 }
 else if __down=true {
 
  if _vspeed&lt;_maxspeed _vspeed+=_acceleration*0.5;
 
  }
  else _vspeed*=_friction; 
   
//Executing:
movement_execute(0,0,__down,0,4);

end;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Step Actions (Secondary)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Primary)
var __eta, __dist, __spd;

//***************************************
if object_index=obj_ai_parent_flyer begin
//***************************************

if _attackMode=0 begin

if _attackTimer&gt;-_attackSpeed {
 
 //Deal damage:
 if (instance_exists(_target) and _target&gt;0) {
  if (_attackTimer=0 and distance_to_object(_target)&lt;=_attackRange) {
  
   if (_target=global.player_obj_id) {
   
    if irandom(100)&lt;_chanceToGrab and (global.player_obj_id)._grounded=true{
     _attackMode=1;
     _grabbedPlayer=1;
     }
     else {   
      player_damage(_attackDamage,_attackVKnock,_attackHKnock);
      screen_flash(c_red);      
      }
      
    }
    else {
     object_damage(_target,_attackDamage,_attackVKnock,_attackHKnock);
     }
   
   _lastAttack=0; 
     
   }
  }
 }
  
 else {
 
 //Try to attack:
 if (instance_exists(_target) and _target&gt;0) {

  //Estimate ETA:
  __eta=9999;
  __dist=9999;
  if collision_line(x,y,_tarX,_tarY,staticParObj,true,true)==noone {

   __dist=distance_to_object(_target)-_attackRange/2;
   __spd=abs(_hspeed-_target._hspeed);
  
   if __spd&lt;&gt;0
    __eta=ceil(__dist/__spd)+1;

   }

  tv1=__eta;  
      
  //Start attack animation: 
  if (__eta&lt;_attackLength or __dist&lt;=_attackRange/2) {
   _attackTimer=_attackLength;  
   }
 
 }
  
}

end;

//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Attack (Secondary)

//***************************************
if object_index=obj_ai_parent_flyer begin
//***************************************

if _attackMode=1 begin

 object_move_to(global.player_obj_id,x,y+16,2,16);
 
 (global.player_obj_id)._hspeed=_hspeed;
 (global.player_obj_id)._vspeed=0;
 
 if _lastAttack&gt;150
  _grabbedPlayer=0;

end;

//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///*Set image

//*********************************
if object_index=obj_ai_parent_flyer begin
//*********************************


if _hspeed&lt;&gt;0 {
 if _grounded=false
  image_xscale=sign(_hspeed)
  else
   image_xscale=-1+(_tarX&gt;x)*2;
 }
 

//***
 end;
//***
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finalize step

//*** DESTROY: ***
if _health&lt;=0
 instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_ai_parent">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_paused()</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Push out other bodies
var __int=_density;

if other._grounded=1
 other._hspeed+=__int*dcos(point_direction(x,y,other.x,other.y));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self

draw_sprite_ext(mask_index,0,x,y,1,1,0,c_white,0.5);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,ite(_moveHeight,1,0.5,1),1,c_white,1);

if _attackTimer&gt;=0
 draw_sprite_ext(mask_index,0,x,y,1,1,0,c_yellow,0.5);

draw_text(x,y,string(_attackTimer)+"#"+string(_health));

//draw_line(x,y,_tarX,_tarY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
