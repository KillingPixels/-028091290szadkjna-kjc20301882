<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_repair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic variables setup:
scroll=0;
selected="";

xx=0;
yy=0;

//Update repair combinations:
/*

if sev_get("Abc")=true repair_define_repair_item("Def", 50);

*/

//Maximum target durability:
update_maxdur=true;

//Repair item list:
var i;

for (i=1; i&lt;=10; i+=1) begin
 item_list[i]="";
end;

update_list=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,obj_gui_inventory);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Closing:
if keyboard_check_pressed(userControls[KEYBOARD.pause])=true
 instance_destroy();

//Scroll:
if mouse_wheel_down()=true {
 if item_list[10]&lt;&gt;"" scroll+=1;
 }
 else if mouse_wheel_up()=true {
  if scroll&gt;0 scroll-=1;
  }

//Scroll correction:
if item_list[10]="" and scroll&gt;0
 scroll-=1;
  
//Maximum durability update:
if update_maxdur=true {
 if target&gt;0
  maxdur=armour_max_dur(global.inventory_current[target,1])
  else
   maxdur=armour_max_dur(global.inventory_armour[1]);
 update_maxdur=false;
 }

//Repair item list update:
if update_list=true {

 var i,counter,valid_counter,current;

 for (i=1; i&lt;=10; i+=1) begin
  item_list[i]="";
 end;

 current=ds_map_find_first(global.repair_map_a);
 valid_counter=0;
 counter=1;
 
 for (i=1; i&lt;=ds_map_size(global.repair_map_a); i+=1) begin
 
  if inv_count_item(current)&gt;0 valid_counter+=1;
  
  if valid_counter&gt;scroll {
   item_list[counter]=current;
   counter+=1;
   }
   
  if current&lt;&gt;ds_map_find_last(global.repair_map_a)
   current=ds_map_find_next(global.repair_map_a,current)
   else break;
   
  if counter&gt;10 break;
 
 end;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spr,val,counter;

draw_set_font(f_windows);

//Set up GUI x and y:
xx=gui_width()/2-sprite_get_width(sprite_index)/2;
yy=gui_height()/2-sprite_get_height(sprite_index)/2;

//Draw own sprite:
draw_sprite(sprite_index,0,xx,yy);

//ITEM LIST::
draw_set_alpha(1);
draw_set_valign(fa_top);
draw_set_halign(fa_left);

counter=0;

//LOOP BEGIN:
repeat (10) begin
counter+=1;

if item_list[counter]&lt;&gt;"" {

//Small icons:
spr=real( inv_item_get_static_value(item_list[counter],7));
draw_sprite_ext(spr,0,xx+9,yy+counter*20+43,0.5,0.5,0,c_white,1); 

//Clickable text boxes:
spr=ite(item_list[counter],selected,1,0);
if gui_draw_sprite_clickable(spr_window_name_box_wide,spr,xx+29,yy+counter*20+43,1)=true
 {selected=item_list[counter]; 
  /*update_array=true;*/}

//Combination names:
draw_set_color(c_black);
 draw_text(xx+32,yy+44+20*counter,item_list[counter]+" ("+string(inv_count_item(item_list[counter]))+")");

}
end;
//LOOP END;

//Filter title:
draw_set_color(c_black);
draw_text(xx+12,yy+42,"Items to repair with:");

//REPAIR ITEM BEGIN:

//Item name:
if selected&lt;&gt;"" str=selected+" ("+string(inv_count_item(selected))+")";
 else str="No item selected.";
draw_text(xx+254,yy+41,str);

//Item icon:
if selected&lt;&gt;"" {
 spr=real(inv_item_get_static_value(selected,7));
 draw_sprite(spr,0,xx+355,yy+67);
 }

//Repair power:
if selected&lt;&gt;"" {
 str="Repair#potency: "+string(global.repair_map_a[?selected]);
 draw_text(xx+254,yy+70,str);
 }

//REPAIR ITEM END;

//SCROLL:
if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+230,yy+63,true)=true {
 if scroll&gt;0 scroll-=1;
 }
if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+230,yy+244,true)=true {
 if item_list[10]&lt;&gt;"" scroll+=1;
 }

//REPAIRED ITEM BEGIN:

//Item name:
draw_set_colour(c_black);
if target&gt;0
 str=global.inventory_current[target,1]
 else
  str=global.inventory_armour[1];
draw_text(xx+254,yy+118,str);

//Item icon:
if target&gt;0
 spr=real(inv_item_get_static_value(global.inventory_current[target,1],7))
 else
  spr=real(inv_item_get_static_value(global.inventory_armour[1],7));
draw_sprite(spr,0,xx+355,yy+144);

//Durability:
if target&gt;0
 str=inv_item_get_dynamic_value(target,false,1)
 else
  str=global.inventory_armour[4];
str="Durability:#"+string(round(str))+" / "+string(maxdur);
draw_text(xx+254,yy+147,str);

//Durability after repair:
if selected&lt;&gt;"" {
 draw_set_color(c_green);

 if target&gt;0
  str=min(inv_item_get_dynamic_value(target,false,1)+global.repair_map_a[?selected],maxdur)
  else
   str=min(global.inventory_armour[4]+global.repair_map_a[?selected],maxdur);
 str="After repair:#"+string(round(str))+" / "+string(maxdur);
 draw_text(xx+254,yy+209,str);
 }

//REPAIRED ITEM END;

//Repair button:
if selected&lt;&gt;"" {

 if target&gt;0
  val=inv_item_get_dynamic_value(target,false,1)
  else
   val=global.inventory_armour[4]

 if clamp(val+global.repair_map_a[?selected],0,maxdur)&lt;&gt;val
  spr=0
  else {
   spr=1;
   selected="";
   }
 if inv_count_item(selected)&lt;1 {
  spr=1;
  selected="";
  }
 
   
}
else
 spr=1;


if gui_draw_sprite_clickable(spr_window_button_repair,spr,xx+247,yy+248,true)=true
 {if spr=0 {
 
   if target&gt;0 {
    inv_item_set_dynamic_value(target,false,1,round(clamp(val+global.repair_map_a[?selected],0,maxdur)));   
    }
    else {     
     global.inventory_armour[4]=round(clamp(val+global.repair_map_a[?selected],0,maxdur));
     (global.player_obj_id)._armour=global.inventory_armour[4]*armour_get_ratio(global.inventory_armour[1]);
     }
   
   inv_remove_item(selected,1);
   
   }
   
 }

//Close button:
if gui_draw_sprite_clickable_rel(spr_window_close,0,xx+283,yy+270)
 instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is empty but needed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>200,200</point>
  </PhysicsShapePoints>
</object>
