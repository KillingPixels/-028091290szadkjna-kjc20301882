<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_window_textbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setup:
stage=1;
branch=1;
choice=0;
code_sec="";

name_1="Name 1";
name_2="Name 2";
sprite_1=spr_portrait_template;
sprite_2=spr_portrait_template;

//text_array[0]="";
text_grid=ds_grid_create(1,1);
text_grid[#0,0]=ds_list_create();
rows[0]=0;
enabled[0]=0;

scroll=0;

//Other:
update_box=true;
text_width=450;
text_sep=20;
text_max_rows=9;

veil=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TPP_text_free(text_grid);
txt_clear();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choices &amp; Updating

//Veil:
if veil&gt;0 veil*=0.85;

if veil&lt;0.01 veil=0;

//Choices:
var a;

if choice=0 {

 if keyboard_check_pressed(ord("1"))=true choice=1
  else if keyboard_check_pressed(ord("2"))=true choice=2
   else if keyboard_check_pressed(ord("3"))=true choice=3
    else if keyboard_check_pressed(ord("4"))=true choice=4
     else if keyboard_check_pressed(ord("5"))=true choice=5
      else if keyboard_check_pressed(ord("6"))=true choice=6
       else if keyboard_check_pressed(ord("7"))=true choice=7
        else if keyboard_check_pressed(ord("8"))=true choice=8
         else if keyboard_check_pressed(ord("9"))=true choice=9
          else if keyboard_check_pressed(ord("0"))=true choice=10;
   
 };
 
if (choice&lt;&gt;0 and choice&gt;txt_property_get(stage,branch,TEXTBOX.choices))
 choice=0;

//IF A CHOICE WAS MADE:
if choice&lt;&gt;0 {

 a=txt_path_get(stage, branch, choice);

 stage=a[0];
 branch=a[1];
 choice=0;
 
 io_clear();
 
 scroll=0;
 update_box=true;

 //Execute Secondary Code:
 if is_string(code_sec) {
  if code_sec&lt;&gt;"" {   
   NSP_execute_string(code_sec);
   }
  }
 
 //Check for end of textbox:
 if is_undefined(txt_property_get(stage,branch,TEXTBOX.main))=true {
  instance_destroy();
  exit;
  }
 
 };
 
//REGULAR STEP UPDATE:

//Scroll:
if mouse_wheel_up()=true scroll-=1;
 else if mouse_wheel_down()=true scroll+=1;
 
scroll=clamp(scroll,0,max(TPP_text_get_lines(text_grid)-text_max_rows,0));

//Textbox update:
if update_box=true {

 var i,g,b,text_main,text_choice,text_cond,do_show,counter;

 //Text grid:
 TPP_text_free(text_grid);
 rows=0;
 
 text_main=txt_property_get(stage,branch,TEXTBOX.main)+"\n"+string_repeat("=",33);

 g=TPP_text_parse(text_main,c_black,1,f_textbox_regular,fa_center,1,text_width,text_sep,1);
 rows[0]=TPP_text_get_lines(g);
 
 counter=1;
 for (i=1; i&lt;=txt_property_get(stage,branch,TEXTBOX.choices); i+=1) begin
 
  text_choice=string_replace(txt_choice_get(stage,branch,i),"{End}","");
  
  //Check for condition:
  do_show=false;
  if string_pos("{Cdt}",text_choice)&gt;0 {
  
   text_cond=string_copy(text_choice,1,string_pos("{Cdt}",text_choice)-1);
   text_choice=string_delete(text_choice,1,string_pos("{Cdt}",text_choice)+4);
  
   if NSP_evaluate(text_cond)=true
    do_show=true;
   
   }
   else do_show=true;
 
  //Show:
  if do_show=true {
   
   b=string(counter)+". "+text_choice;   
   enabled[i]=true;
   counter+=1;
   
   var t=TPP_text_get_lines(g);
   TPP_text_append(g,b,text_width,text_sep,1);
   rows[i]=TPP_text_get_lines(g)-t;
   
   }
   //Don't show:
   else {
   
    rows[i]=0;
    enabled[i]=false;
   
    }
 
 end;

 //text_array=a;
 text_grid=g;
 
 //Other:
 scroll=0;
 veil=1;
 code_sec=txt_property_get(stage,branch,TEXTBOX.code_s);
 
 //Execute Primary Code:
 var c=txt_property_get(stage,branch,TEXTBOX.code_p);
 
 if is_string(c) {
  if c&lt;&gt;"" {
   NSP_execute_string(c);
   }
  }
 
 update_box=false;
 
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx,yy

//Set up GUI x and y:
xx=gui_width()/2-sprite_get_width(sprite_index)/2;
yy=gui_height()-sprite_get_height(sprite_index);

//Draw own sprite:
draw_sprite(sprite_index,0,xx,yy);

//Debug draw:
if (false) {
 draw_text(xx+9,yy+180,"s"+string(stage)+"b"+string(branch));
 }

//Draw portraits:
draw_sprite(sprite_1,0,xx+8,yy+8);
draw_sprite(sprite_2,0,xx+568,yy+8);

//Draw names:
draw_set_font(f_windows);
draw_set_colour(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_text_ext(xx+10,yy+82,name_1,12,61);
draw_text_ext(xx+570,yy+82,name_2,12,61);

//Crash safety:
if (update_box=true) exit;

//Draw clickable bars:
var i,h,first,last,row;

first=scroll;
last=min(first+text_max_rows,TPP_text_get_lines(text_grid));
h=text_sep;

for (i=1; i&lt;=txt_property_get(stage,branch,TEXTBOX.choices); i+=1) begin

 if enabled[i]=true {

  row=1;
  for (t=0; t&lt;i; t+=1) {row+=rows[t];}
 
  if (row&lt;=last and row+rows[i]-1&gt;=first+1) {
 
   if gui_draw_rectangle_clickable(xx+83,yy+10+h*max(row-scroll-1,0),459,h*(rows[t]-max(first+1-row,0)-max(row+rows[i]-1-last,0)),true)=true {
 
    choice=i;
 
    }
    
  }
   
 }

end;

//Draw text:
TPP_text_print_ext_part(xx+85,yy+9,text_grid,fa_left,fa_top,first+1,last);
//draw_text(xx+85,yy+200,"Hello, my name is Tom! What's yours?");

//Scroll:
if gui_draw_sprite_clickable(spr_window_button_scroll,0,xx+545,yy+9,true)=true {
 scroll-=1;
 }
 
if gui_draw_sprite_clickable(spr_window_button_scroll,1,xx+545,yy+172,true)=true {
 scroll+=1;
 }
 
scroll=gui_draw_scroll_bar(xx+545,yy+29,xx+555,yy+170,TPP_text_get_lines(text_grid),text_max_rows,scroll,placeholderSpr);

scroll=clamp(scroll,0,max(TPP_text_get_lines(text_grid)-text_max_rows,0));

//Draw the veil:
var w,h;

if (veil&gt;0) {

 w=459;
 h=183;

 draw_sprite_part(sprite_index,0,83,8,w*veil/2,h,xx+83,yy+8);
 draw_sprite_part(sprite_index,0,542-w*veil/2,8,w*veil/2,h,xx+542-w*veil/2,yy+8);
 
 }


//Close button:
//-Not allowed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is empty but needed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
